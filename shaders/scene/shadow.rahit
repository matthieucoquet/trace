#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "common_types.glsl"
#include "map_function"
#include "raymarch.glsl"

layout(binding = 2, set = 0, scalar) buffer Objects { Object o[]; } objects;

layout(location = 1) rayPayloadInEXT float shadow_payload;

float soft_shadow(in Ray ray, float factor)
{
    float res = 1.0;
    float len = length(ray.direction);
    float t = gl_RayTminEXT;
    for (int i = 0; i < 128 && t < gl_RayTmaxEXT; i++)
    {
        float distance = map(ray.origin + t * ray.direction);
        if(distance < 0.001) {
            return 0.0;
        }
        distance = distance / len;
        res = min( res, factor * distance / t);
        t += distance;
    }
    return res;
}

void main()
{
    Object object = objects.o[gl_InstanceID];
    Ray ray = Ray(vec3(object.world_to_model * vec4(gl_WorldRayOriginEXT, 1.0f)), 
                  vec3(object.world_to_model * vec4(gl_WorldRayDirectionEXT, 0.0f)));

    shadow_payload = min(shadow_payload, soft_shadow(ray, 128));
    if (shadow_payload == 0.0)
    {
        terminateRayEXT();
    }
}
