#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "common_types.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(location = 0) rayPayloadEXT vec4 hit_value;

#define LOW_SIZE 4

vec3 get_direction(in vec2 center, in Eye eye, in bool is_right)
{
    vec2 pixel_uv = center / (LOW_SIZE * vec2(gl_LaunchSizeEXT.xy));
    pixel_uv.x = pixel_uv.x * 2;
    pixel_uv.x = is_right ? pixel_uv.x - 1.0 : pixel_uv.x;
    return vec3(tan(eye.fov.left) + pixel_uv.x * (tan(eye.fov.right) - tan(eye.fov.left)),
        tan(eye.fov.up) + pixel_uv.y * (tan(eye.fov.down) - tan(eye.fov.up)),
        -1.0);
}

vec4 shoot_ray(in vec3 direction, in Eye eye)
{
    direction = direction + 2.0 * cross(eye.pose.rotation.xyz, cross(eye.pose.rotation.xyz, direction) + eye.pose.rotation.w * direction);
    direction = normalize(direction);

    float tmin = 0.2;
    float tmax = 12.0;

    hit_value = vec4(0.0, 0.2, 0.0, 0.0);
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, eye.pose.position, tmin, direction.xyz, tmax, 0);
    vec4 result = hit_value;
    return result;
}

void main()
{
    bool is_right = gl_LaunchIDEXT.x >= gl_LaunchSizeEXT.x / 2;
    //Eye eye = is_right ? scene_global.right : scene_global.left;
    Eye eye = scene_global.left;
    if (is_right) {
        eye = scene_global.right;
    }

    /*if (LOW_SIZE * gl_LaunchIDEXT.y > gl_LaunchSizeEXT.y && LOW_SIZE * gl_LaunchIDEXT.y < 3 * gl_LaunchSizeEXT.y)
    {
        uint check = LOW_SIZE * gl_LaunchIDEXT.x;
        //check = is_right ? (check - 2 * gl_LaunchSizeEXT.x) : check;
        check = check % (2 * gl_LaunchSizeEXT.x);
        uint t = gl_LaunchSizeEXT.x / 2;
        if (check >= 4 * t - 10 || check < 3 * t) {
            return;
        }
    }*/
    const vec2 group_center = LOW_SIZE * (vec2(gl_LaunchIDEXT.xy) + vec2(0.5));
    vec3 direction = get_direction(group_center, eye, is_right);

    vec4 color = shoot_ray(direction, eye);
    for (int i = 0; i < LOW_SIZE; i++){
        for (int j = 0; j < LOW_SIZE; j++){
            ivec2 offset = ivec2(i , j);
            imageStore(image, nonuniformEXT(ivec2(LOW_SIZE * gl_LaunchIDEXT.xy + offset)), color);
        }
    }
}