#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "common_primitives.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;

layout(location = 0) rayPayloadEXT vec3 hit_value;

#define LOW_SIZE 1
#define SIZE_RATIO 2.0
//#define HIGH_ANGLE 0.5

vec3 get_direction(vec2 center, Eye eye, bool is_right)
{
    vec2 pixel_uv = center / (SIZE_RATIO * vec2(gl_LaunchSizeEXT.xy));
    pixel_uv.x = pixel_uv.x * 2;
    pixel_uv.x = is_right ? pixel_uv.x - 1.0 : pixel_uv.x;
    return vec3(tan(eye.fov.left) + (pixel_uv.x) * (tan(eye.fov.right) - tan(eye.fov.left)),
        tan(eye.fov.up) + (pixel_uv.y) * (tan(eye.fov.down) - tan(eye.fov.up)),
        -1.0);
}

vec3 shoot_ray(vec3 direction, Eye eye)
{
    direction = direction + 2.0 * cross(eye.pose.rotation.xyz, cross(eye.pose.rotation.xyz, direction) + eye.pose.rotation.w * direction);
    direction = normalize(direction);

    float tmin = 0.2;
    float tmax = 12.0;

    hit_value = vec3(0.0, 0.2, 0.0);
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, eye.pose.position, tmin, direction.xyz, tmax, 0);
    //traceRayEXT(topLevelAS, 0, 0xFF, 0, 0, 0, eye.pose.position, tmin, direction.xyz, tmax, 0);
    vec3 result = hit_value;
    return result;
}

void main()
{
    bool is_right = gl_LaunchIDEXT.x >= gl_LaunchSizeEXT.x / 2;
    //Eye eye = is_right ? scene_global.right : scene_global.left;
    Eye eye = scene_global.left;
    if (is_right) {
        eye = scene_global.right;
    }
    
    uvec2 offset = uvec2(gl_LaunchSizeEXT.xy);
    offset.y = offset.y / 2;
    offset.x = (offset.x / 4) * (is_right ? 3 : 1);
    const vec2 center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + vec2(offset);

    vec3 direction = get_direction(center, eye, is_right);
    hit_value = vec3(0.0, 0.0, 0.0);
    vec3 color = shoot_ray(direction, eye);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy + offset), vec4(color, 0.0));
}