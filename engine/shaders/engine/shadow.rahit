#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "common_types.glsl"
#include "map_function"
#include "raymarch.glsl"

layout(location = 1) rayPayloadInEXT float shadow_payload;

float soft_shadow(in Ray ray, in float factor)
{
    float res = 1.0;
    float len = length(ray.direction);
    float t = gl_RayTminEXT;
    for (int i = 0; i < 128 && t < gl_RayTmaxEXT; i++)
    {
        float distance = map(ray.origin + t * ray.direction).dist;
        if(distance < 0.0001) {
            return 0.0;
        }
        distance = distance / len;
        res = min(res, factor * distance / t);
        t += ADVANCE_RATIO * distance;
        //res = min( res, 0.4);
    }
    return res;
}

void main()
{
    shadow_payload = 0.0f;
    //Ray ray = Ray(gl_WorldToObjectEXT * vec4(gl_WorldRayOriginEXT, 1.0f), 
    //              gl_WorldToObjectEXT * vec4(gl_WorldRayDirectionEXT, 0.0f));
    //shadow_payload = 0.5f;
    //shadow_payload = min(shadow_payload, soft_shadow(ray, 32.0));
    //shadow_payload = soft_shadow(ray, 32.0);
    //if (shadow_payload == 0.0)
    //{
    //    terminateRayEXT();
    //}
}
