#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#include "common_types.glsl"
#include "map_function"
#include "raymarch.glsl"

layout(location = 0) rayPayloadInEXT float shadow_payload;

float ambient_occlusion(in Ray ray)
{
	float occlusion = 0.0;
    float scale = 1.0;
    float len = length(ray.direction);
    for(int i = 0; i < 5; i++)
    {
        float h = 0.001 + 0.07 * float(i) / 4.0;
        float d = map(ray.origin + h / len * ray.direction).dist;
        occlusion += max(0, h - d) * scale;
        scale *= 0.95;
    }
    return clamp(1.0 - 3.0 * occlusion, 0.0, 1.0);
}

void main()
{
    Ray ray = Ray(gl_WorldToObjectEXT * vec4(gl_WorldRayOriginEXT, 1.0f),
                  gl_WorldToObjectEXT * vec4(gl_WorldRayDirectionEXT, 0.0f));
    shadow_payload = min(shadow_payload, ambient_occlusion(ray));
    if (shadow_payload == 0.0)
    {
        terminateRayEXT;
    }
}









